<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Advanced Camera & Screen Recorder</title>
<style>
  video, canvas { width: 100%; max-width: 500px; border: 1px solid #ccc; margin-bottom: 10px; }
  select, button { margin-top: 10px; padding: 10px; width: 100%; }
</style>
</head>
<body>

<h2>Camera & Screen Recorder with Custom Resolutions</h2>

<select id="mode">
  <option value="camera">Webcam</option>
  <option value="screen">Screen</option>
</select>

<select id="videoRes">
  <option value="3840x2160">4K (3840x2160)</option>
  <option value="2560x1440">2K (2560x1440)</option>
  <option value="2048x1080">17:9 (2048x1080)</option>
  <option value="1920x1080">1080p (1920x1080)</option>
  <option value="1920x886">17:9 (1920x886)</option>
  <option value="1366x768">1366x768</option>
</select>

<select id="facing">
  <option value="user">Front Camera</option>
  <option value="environment">Back Camera</option>
</select>

<select id="photoRes">
  <option value="4032x3024">12MP</option>
  <option value="12000x9000">108MP</option>
  <option value="8688x5792">50MP</option>
  <option value="4000x3000">10MP</option>
  <option value="2592x1944">5MP</option>
  <option value="3264x2448">8MP</option>
</select>

<video id="video" autoplay muted></video>
<canvas id="canvas"></canvas>
<button id="snap">Capture Photo</button>
<button id="start">Start Recording</button>
<button id="stop" disabled>Stop & Download</button>

<script>
const video = document.getElementById('video');
const canvas = document.getElementById('canvas');
const context = canvas.getContext('2d');
const startBtn = document.getElementById('start');
const stopBtn = document.getElementById('stop');
const snapBtn = document.getElementById('snap');
const modeSelect = document.getElementById('mode');
const facingSelect = document.getElementById('facing');
const videoResSelect = document.getElementById('videoRes');
const photoResSelect = document.getElementById('photoRes');

let currentStream;
let mediaRecorder;
let recordedChunks = [];

async function startStream() {
  if (currentStream) currentStream.getTracks().forEach(track => track.stop());
  recordedChunks = [];

  const [width, height] = videoResSelect.value.split('x').map(Number);

  try {
    if (modeSelect.value === 'camera') {
      currentStream = await navigator.mediaDevices.getUserMedia({
        video: { width, height, frameRate: 30, facingMode: facingSelect.value },
        audio: true
      });
    } else {
      currentStream = await navigator.mediaDevices.getDisplayMedia({
        video: { frameRate: 30 },
        audio: true
      });
    }
    video.srcObject = currentStream;
  } catch (err) {
    console.error("Error accessing stream:", err);
    alert("Access denied or not available");
  }
}

// Photo capture
snapBtn.addEventListener('click', () => {
  const [w, h] = photoResSelect.value.split('x').map(Number);
  canvas.width = w;
  canvas.height = h;
  context.drawImage(video, 0, 0, canvas.width, canvas.height);

  const a = document.createElement('a');
  a.href = canvas.toDataURL('image/jpeg', 1.0);
  a.download = `photo_${w}x${h}.jpg`;
  a.click();
});

// Video recording
startBtn.addEventListener('click', () => {
  if (!currentStream) return;

  const options = {
    mimeType: 'video/mp4; codecs="avc1.42E01E, mp4a.40.2"',
    videoBitsPerSecond: 5_000_000,
    audioBitsPerSecond: 150_000
  };

  try {
    mediaRecorder = new MediaRecorder(currentStream, options);
  } catch (err) {
    console.error("MediaRecorder not supported:", err);
    alert("MediaRecorder not supported in this browser");
    return;
  }

  mediaRecorder.ondataavailable = e => { if (e.data.size > 0) recordedChunks.push(e.data); };
  mediaRecorder.onstop = () => {
    const blob = new Blob(recordedChunks, { type: 'video/mp4' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `record_${videoResSelect.value}.mp4`;
    a.click();
    URL.revokeObjectURL(url);
  };

  mediaRecorder.start();
  startBtn.disabled = true;
  stopBtn.disabled = false;
});

stopBtn.addEventListener('click', () => {
  mediaRecorder.stop();
  startBtn.disabled = false;
  stopBtn.disabled = true;
});

// Restart stream if options change
modeSelect.addEventListener('change', startStream);
facingSelect.addEventListener('change', startStream);
videoResSelect.addEventListener('change', startStream);

// Start initial stream
startStream();
</script>

</body>
</html>
