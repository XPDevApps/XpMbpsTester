<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Web Camera App MKV</title>
<style>
  video, canvas { width: 100%; max-width: 400px; border: 1px solid #ccc; }
  select, button { margin-top: 10px; padding: 10px; width: 100%; }
</style>
</head>
<body>

<h2>Web Camera App MKV</h2>

<select id="resolution">
  <option value="320x240">320x240</option>
  <option value="640x480">640x480</option>
  <option value="1280x720" selected>1280x720</option>
  <option value="1920x1080">1920x1080</option>
</select>

<select id="facing">
  <option value="user">Front Camera</option>
  <option value="environment">Back Camera</option>
</select>

<video id="video" autoplay></video>
<button id="snap">Capture Photo</button>
<button id="start">Start Recording</button>
<button id="stop">Stop & Download</button>
<canvas id="canvas"></canvas>

<script>
const video = document.getElementById('video');
const canvas = document.getElementById('canvas');
const context = canvas.getContext('2d');
const snapBtn = document.getElementById('snap');
const startBtn = document.getElementById('start');
const stopBtn = document.getElementById('stop');
const resolutionSelect = document.getElementById('resolution');
const facingSelect = document.getElementById('facing');

let currentStream;
let mediaRecorder;
let recordedBlobs = [];
let recording = false;

// Démarrer la caméra
async function startCamera() {
  if (currentStream) {
    // Stop tous les tracks existants
    currentStream.getTracks().forEach(track => track.stop());
  }

  const [width, height] = resolutionSelect.value.split('x').map(Number);
  const facingMode = facingSelect.value;

  try {
    currentStream = await navigator.mediaDevices.getUserMedia({
      video: { width, height, facingMode },
      audio: true
    });
    video.srcObject = currentStream;

    // Si on était en enregistrement, redémarrer MediaRecorder
    if (recording) {
      startRecording();
    }

  } catch (err) {
    console.error("Error accessing camera: ", err);
    alert("Camera access denied or not available");
  }
}

// Démarrer l'enregistrement
function startRecording() {
  if (!currentStream) return;
  recordedBlobs = [];

  const options = {
    mimeType: 'video/webm; codecs=vp8', // MKV en H264 nativement n'est pas supporté dans MediaRecorder, WebM c'est plus compatible
    videoBitsPerSecond: 5_000_000
  };

  mediaRecorder = new MediaRecorder(currentStream, options);

  mediaRecorder.ondataavailable = event => {
    if (event.data && event.data.size > 0) {
      recordedBlobs.push(event.data);
    }
  };

  mediaRecorder.start();
  recording = true;
  console.log("Recording started");
}

// Stop & download
function stopRecording() {
  if (!mediaRecorder) return;
  mediaRecorder.stop();
  recording = false;

  const blob = new Blob(recordedBlobs, { type: 'video/webm' });
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.style.display = 'none';
  a.href = url;
  a.download = 'recording.webm';
  document.body.appendChild(a);
  a.click();
  setTimeout(() => {
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  }, 100);
}

// Capture photo
snapBtn.addEventListener('click', () => {
  canvas.width = video.videoWidth;
  canvas.height = video.videoHeight;
  context.drawImage(video, 0, 0, canvas.width, canvas.height);

  const dataURL = canvas.toDataURL('image/jpeg', 0.95);
  const a = document.createElement('a');
  a.href = dataURL;
  a.download = 'photo.jpg';
  a.click();
});

// Événements boutons
startBtn.addEventListener('click', startRecording);
stopBtn.addEventListener('click', stopRecording);

// Changement de caméra ou résolution
resolutionSelect.addEventListener('change', startCamera);
facingSelect.addEventListener('change', startCamera);

// Démarrage initial
startCamera();
</script>

</body>
</html>
