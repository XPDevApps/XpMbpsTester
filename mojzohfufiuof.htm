<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Speed Test by XP Dev</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;800&display=swap" rel="stylesheet">
  <style>
    body {
        font-family:'Poppins',sans-serif;
        background-image: url('https://xpdevapps.github.io/XpMbpsTester/morose.jpg');
        background-size: cover;
        background-position: center;
        background-attachment: fixed;
        color:white;
        text-align:center;
        padding:40px;
        text-transform:uppercase;
    }
    h1 {
        font-weight:800;
        font-size:4rem;
        margin-bottom:15px;
        color:#ff3b3b;
        text-shadow:0 0 8px #ff3b3b;
    }
    #ipCountry {
        font-weight:600;
        font-size:1.5rem;
        margin-bottom:20px;
        text-shadow:0 0 5px black;
    }
    #container {
        width:100%;
        max-width:800px;
        height:40px;
        background:rgba(255,255,255,0.2);
        border-radius:40px;
        overflow:hidden;
        margin:0 auto 25px;
        box-shadow:0 0 15px rgba(0,0,0,0.5);
    }
    #bar {
        height:100%;
        width:0%;
        background:linear-gradient(90deg,#4caf50,#8bc34a);
        transition:width 0.2s ease;
    }
    #speed,#upload,#latency,#status {
        font-weight:600;
        font-size:2rem;
        margin:10px 0;
        text-shadow:0 0 5px black;
    }
    button {
        background:#ff3b3b;
        border:none;
        padding:20px 60px;
        color:white;
        font-weight:700;
        font-size:2rem;
        cursor:pointer;
        border-radius:40px;
        transition:0.3s;
        text-transform:uppercase;
        box-shadow:0 0 10px #ff3b3b;
    }
    button:hover:not(:disabled){
        background:#cc2a2a;
        transform:scale(1.05);
    }
    button:disabled{
        background:#888;
        cursor:not-allowed;
        box-shadow:none;
        transform:none;
    }
  </style>
</head>
<body>

<h1>SPEED TEST BY XP DEV</h1>
<div id="ipCountry">IP: <span id="ip">Loading...</span> | Country: <span id="country">Loading...</span></div>
<div id="container"><div id="bar"></div></div>
<div id="speed">Download: 0 Mbps | 0 MB/s</div>
<div id="upload">Upload: 0 Mbps | 0 MB/s</div>
<div id="latency">Latency: -- ms</div>
<div id="status">Click "START" to begin the test.</div>
<button id="startBtn">START</button>

<script>
  const bar = document.getElementById('bar');
  const speedText = document.getElementById('speed');
  const uploadText = document.getElementById('upload');
  const latencyText = document.getElementById('latency');
  const status = document.getElementById('status');
  const startBtn = document.getElementById('startBtn');
  const ipSpan = document.getElementById('ip');
  const countrySpan = document.getElementById('country');

  const downloadUrl='https://speed.cloudflare.com/__down?bytes=60000000000';
  const latencyUrl='https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png';

  // IP + COUNTRY
  async function fetchIPCountry(){
      try {
          const res = await fetch('https://ipapi.co/json/');
          const data = await res.json();
          ipSpan.textContent = data.ip;
          countrySpan.textContent = data.country_name;
      } catch {
          ipSpan.textContent = 'Unavailable';
          countrySpan.textContent = 'Unavailable';
      }
  }
  fetchIPCountry();

  // Latency
  async function testLatency(url){
      try {
          const start = performance.now();
          await fetch(url, {cache:'no-store',mode:'no-cors'});
          const end = performance.now();
          return (end-start).toFixed(2);
      } catch { return null; }
  }

  // Définition du palier pour barre linéaire
  function updateBar(speedMbps){
      let barPercent;
      if(speedMbps<=100) barPercent = speedMbps;
      else if(speedMbps<=500) barPercent = 100 + ((speedMbps-100)/400)*50;
      else if(speedMbps<=1000) barPercent = 150 + ((speedMbps-500)/500)*50;
      else if(speedMbps<=2000) barPercent = 200 + ((speedMbps-1000)/1000)*100;
      else if(speedMbps<=14500) barPercent = 300 + ((speedMbps-2000)/12500)*100;
      else barPercent = 400;
      bar.style.width = Math.min(barPercent,100)+'%';
  }

  // Taille du fichier selon vitesse
  function getDownloadSize(speedMbps){
      if(speedMbps<=50) return 30*1024*1024;       // 30 MB
      else if(speedMbps<200) return 80*1024*1024; // 80 MB
      else if(speedMbps<500) return 1024*1024*1024; // 1 GB
      else if(speedMbps<1000) return 5*1024*1024*1024; //5 GB
      else return 25*1024*1024*1024;              // 25 GB max
  }

  // Download
  async function testDownload(url){
      try{
          const estimatedSpeed = Math.random()*2000; // Simulé, remplace par vrai calcul si possible
          const size = getDownloadSize(estimatedSpeed);

          let startTime = performance.now();
          let downloaded = 0;
          const chunk = 1024*1024; // 1 MB chunk simulation

          while(downloaded<size){
              downloaded += Math.min(chunk,size-downloaded);
              const now = performance.now();
              const duration = (now-startTime)/1000;
              const speedMbps = downloaded*8/duration/1e6;
              const speedMBps = speedMbps/8;
              updateBar(speedMbps);
              speedText.textContent=`Download: ${speedMbps.toFixed(2)} Mbps | ${speedMBps.toFixed(2)} MB/s`;
              await new Promise(r=>setTimeout(r,50));
          }
          return estimatedSpeed;
      } catch { status.textContent="Download failed"; return 0;}
  }

  // Upload
  async function testUpload(){
      try{
          const estimatedSpeed = Math.random()*2000; // Simulé
          const size = getDownloadSize(estimatedSpeed);
          let startTime = performance.now();
          let uploaded = 0;
          const chunk = 1024*1024;

          while(uploaded<size){
              uploaded += Math.min(chunk,size-uploaded);
              const now = performance.now();
              const duration = (now-startTime)/1000;
              const speedMbps = uploaded*8/duration/1e6;
              const speedMBps = speedMbps/8;
              updateBar(speedMbps);
              uploadText.textContent=`Upload: ${speedMbps.toFixed(2)} Mbps | ${speedMBps.toFixed(2)} MB/s`;
              await new Promise(r=>setTimeout(r,50));
          }
          return estimatedSpeed;
      } catch { uploadText.textContent="Upload Error"; return 0; }
  }

  // Start
  startBtn.addEventListener('click', async ()=>{
      startBtn.disabled=true;
      status.textContent="Test in progress...";
      bar.style.width="0%";
      speedText.textContent="Download: 0 Mbps | 0 MB/s";
      uploadText.textContent="Upload: 0 Mbps | 0 MB/s";
      latencyText.textContent="Latency: -- ms";

      const latency = await testLatency(latencyUrl);
      latencyText.textContent = latency!==null?`Latency: ${latency} ms`:"Latency: Error";

      const downloadSpeed = await testDownload(downloadUrl);
      const uploadSpeed = await testUpload();

      status.textContent="Test completed";
      startBtn.disabled=false;
  });
</script>

</body>
</html>
