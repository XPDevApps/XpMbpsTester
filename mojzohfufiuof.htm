<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Advanced Speed Test by XP Dev</title>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;800&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Poppins', sans-serif;
      background-image: url('https://xpdevapps.github.io/XpMbpsTester/morose.jpg');
      background-size: cover;
      background-position: center;
      background-attachment: fixed;
      color: white;
      text-align: centre;
      padding: 40px;
      text-transform: uppercase;
    }
    h1 {
      font-weight: 800;
      font-size: 4rem;
      margin-bottom: 15px;
      colour: #ff3b3b;
      text-shadow: 0 0 8px #ff3b3b;
    }
    #ipCountry, #speed, #upload, #latency, #status {
      font-weight: 600;
      font-size: 1.5rem;
      margin: 10px 0;
      text-shadow: 0 0 5px black;
    }
    canvas {
      background-color: rgba(255, 255, 255, 0.1);
      border-radius: 20px;
      display: block;
      margin: 20px auto;
      box-shadow: 0 0 10px rgba(0,0,0,0.6);
    }
    button {
      background-colour: #ff3b3b;
      border: none;
      padding: 20px 60px;
      colour: white;
      font-weight: 700;
      font-size: 2rem;
      cursor: pointer;
      border-radius: 40px;
      transition: background 0.3s, transform 0.2s;
      text-transform: uppercase;
      box-shadow: 0 0 10px #ff3b3b;
    }
    button:hover:not(:disabled) {
      background-colour: #cc2a2a;
      transform: scale(1.05);
    }
    button:disabled {
      background-colour: #888;
      cursor: not-allowed;
      box-shadow: none;
    }
  </style>
</head>
<body>
  <h1>Advanced Speed Test by XP Dev</h1>
  <div id="ipCountry">IP: <span id="ip">Loading...</span> | Country: <span id="country">Loading...</span></div>
  <div id="speed">Download: 0 Mbps | 0 MB/s</div>
  <div id="upload">Upload: 0 Mbps | 0 MB/s</div>
  <div id="latency">Latency: -- ms</div>
  <div id="status">Click "START" to begin the test.</div>
  <button id="startBtn">START</button>
  <canvas id="graph" width="800" height="200"></canvas>

  <script>
    const ipSpan = document.getElementById('ip');
    const countrySpan = document.getElementById('country');
    const speedText = document.getElementById('speed');
    const uploadText = document.getElementById('upload');
    const latencyText = document.getElementById('latency');
    const status = document.getElementById('status');
    const startBtn = document.getElementById('startBtn');
    const ctx = document.getElementById('graph').getContext('2d');

    let downloadHistory = [], uploadHistory = [];

    function drawGraph() {
      ctx.clearRect(0, 0, 800, 200);
      ctx.beginPath();
      ctx.strokeStyle = '#4caf50';
      ctx.lineWidth = 2;
      downloadHistory.forEach((val, i) => {
        const x = i * (800 / downloadHistory.length);
        const y = 200 - val;
        if(i === 0) ctx.moveTo(x, y);
        else ctx.lineTo(x, y);
      });
      ctx.stroke();

      ctx.beginPath();
      ctx.strokeStyle = '#ff9800';
      ctx.lineWidth = 2;
      uploadHistory.forEach((val, i) => {
        const x = i * (800 / uploadHistory.length);
        const y = 200 - val;
        if(i === 0) ctx.moveTo(x, y);
        else ctx.lineTo(x, y);
      });
      ctx.stroke();
    }

    async function fetchIPCountry() {
      try {
        const res = await fetch('https://ipapi.co/json/');
        const data = await res.json();
        ipSpan.textContent = data.ip;
        countrySpan.textContent = data.country_name;
      } catch {
        ipSpan.textContent = 'Unavailable';
        countrySpan.textContent = 'Unavailable';
      }
    }

    async function testLatency() {
      const start = performance.now();
      await fetch('https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png', {mode: 'no-cors'});
      const end = performance.now();
      return (end - start).toFixed(2);
    }

    async function testDownload() {
      const start = performance.now();
      const response = await fetch('https://speed.cloudflare.com/__down?bytes=10000000');
      const reader = response.body.getReader();
      let bytes = 0;
      downloadHistory = [];

      while(true) {
        const {done, value} = await reader.read();
        if(done) break;
        bytes += value.length;
        const now = (performance.now() - start) / 1000;
        const mbps = (bytes * 8) / now / 1e6;
        downloadHistory.push(Math.min(mbps * 2, 200));
        speedText.textContent = `Download: ${mbps.toFixed(2)} Mbps | ${(mbps/8).toFixed(2)} MB/s`;
        drawGraph();
      }

      const duration = (performance.now() - start) / 1000;
      return (bytes * 8) / duration / 1e6;
    }

    async function testUpload() {
      const data = new Uint8Array(5e6);
      uploadHistory = [];
      const start = performance.now();
      let bytes = 0;

      for(let i = 0; i < 5; i++) {
        await fetch('https://httpbin.org/post', {
          method: 'POST',
          body: data,
          headers: {'Content-Type': 'application/octet-stream'}
        });
        bytes += data.length;
        const now = (performance.now() - start) / 1000;
        const mbps = (bytes * 8) / now / 1e6;
        uploadHistory.push(Math.min(mbps * 2, 200));
        uploadText.textContent = `Upload: ${mbps.toFixed(2)} Mbps | ${(mbps/8).toFixed(2)} MB/s`;
        drawGraph();
      }

      const duration = (performance.now() - start) / 1000;
      return (bytes * 8) / duration / 1e6;
    }

    startBtn.addEventListener('click', async () => {
      startBtn.disabled = true;
      status.textContent = 'Testing in progress...';
      speedText.textContent = 'Download: 0 Mbps | 0 MB/s';
      uploadText.textContent = 'Upload: 0 Mbps | 0 MB/s';
      latencyText.textContent = 'Latency: -- ms';
      drawGraph();

      const latency = await testLatency();
      latencyText.textContent = `Latency: ${latency} ms`;

      const download = await testDownload();
      const upload = await testUpload();

      speedText.textContent = `Download: ${download.toFixed(2)} Mbps | ${(download/8).toFixed(2)} MB/s`;
      uploadText.textContent = `Upload: ${upload.toFixed(2)} Mbps | ${(upload/8).toFixed(2)} MB/s`;
      status.textContent = 'Test completed';
      startBtn.disabled = false;
    });

    fetchIPCountry();
  </script>
</body>
</html>
</script>

</body>
</html>
