<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Speed Test by XP Dev</title>

<!-- Google Fonts Poppins -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;800&display=swap" rel="stylesheet">

<style>
  body {
    font-family: 'Poppins', sans-serif;
    background-image: url('https://xpdevapps.github.io/XpMbpsTester/morose.jpg');
    background-size: cover;
    background-position: center;
    background-attachment: fixed;
    color: white;
    text-align: center;
    padding: 40px;
    text-transform: uppercase;
  }
  h1 {
    font-weight: 800;
    font-size: 4rem;
    margin-bottom: 15px;
    color: #ff3b3b;
    text-shadow: 0 0 8px #ff3b3b;
  }
  #ipCountry {
    font-weight: 600;
    font-size: 1.5rem;
    margin-bottom: 20px;
    text-shadow: 0 0 5px black;
  }
  #container {
    width: 100%;
    max-width: 800px;
    height: 40px;
    background-color: rgba(255, 255, 255, 0.2);
    border-radius: 40px;
    overflow: hidden;
    margin: 0 auto 25px;
    box-shadow: 0 0 15px rgba(0,0,0,0.5);
  }
  #bar {
    height: 100%;
    width: 0%;
    background: linear-gradient(90deg, #4caf50, #8bc34a);
    transition: width 0.3s ease;
  }
  #speed, #latency, #status {
    font-weight: 600;
    font-size: 2rem;
    margin: 10px 0;
    text-shadow: 0 0 5px black;
  }
  button {
    background-color: #ff3b3b;
    border: none;
    padding: 20px 60px;
    color: white;
    font-weight: 700;
    font-size: 2rem;
    cursor: pointer;
    border-radius: 40px;
    transition: background 0.3s, transform 0.2s;
    text-transform: uppercase;
    box-shadow: 0 0 10px #ff3b3b;
  }
  button:hover:not(:disabled) {
    background-color: #cc2a2a;
    transform: scale(1.05);
  }
  button:disabled {
    background-color: #888;
    cursor: not-allowed;
    box-shadow: none;
    transform: none;
  }
</style>
</head>
<body>

<h1>SPEED TEST BY XP DEV</h1>

<div id="ipCountry">
  IP: <span id="ip">Loading...</span> | Country: <span id="country">Loading...</span>
</div>

<div id="container">
  <div id="bar"></div>
</div>

<div id="speed">Speed: 0 Mbps</div>
<div id="latency">Latency: -- ms</div>
<div id="status">Click "START" to begin the test.</div>
<button id="startBtn">START</button>

<script>
const bar = document.getElementById('bar');
const speedText = document.getElementById('speed');
const latencyText = document.getElementById('latency');
const status = document.getElementById('status');
const startBtn = document.getElementById('startBtn');
const ipSpan = document.getElementById('ip');
const countrySpan = document.getElementById('country');

const downloadUrl = 'https://speed.cloudflare.com/__down?bytes=1000000000'; // 1000MB file
const latencyUrl = 'https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png';

// Fetch IP and Country info from ipapi.co
async function fetchIPCountry() {
  try {
    const res = await fetch('https://ipapi.co/json/');
    if(!res.ok) throw new Error('IP info fetch failed');
    const data = await res.json();
    ipSpan.textContent = data.ip;
    countrySpan.textContent = data.country_name;
  } catch {
    ipSpan.textContent = 'Unavailable';
    countrySpan.textContent = 'Unavailable';
  }
}

// Ping test function
async function testLatency(url) {
  try {
    const start = performance.now();
    await fetch(url, {cache: 'no-store', mode: 'no-cors'});
    const end = performance.now();
    return (end - start).toFixed(2);
  } catch {
    return null;
  }
}

// Download speed test function
async function testDownload(url) {
  try {
    const startTime = performance.now();
    const response = await fetch(url, {cache: 'no-store'});
    const reader = response.body.getReader();
    let bytesReceived = 0;

    while(true) {
      const {done, value} = await reader.read();
      if(done) break;
      bytesReceived += value.length;

      const now = performance.now();
      const duration = (now - startTime) / 1000;
      const bitsLoaded = bytesReceived * 8;
      const speedBps = bitsLoaded / duration;
      const speedMbps = speedBps / 1000000;

      // update bar width (max 100 Mbps for scaling)
      const percent = Math.min(speedMbps, 100);
      bar.style.width = (percent) + "%";
      speedText.textContent = `Speed: ${speedMbps.toFixed(2)} Mbps`;
    }

    const endTime = performance.now();
    const totalDuration = (endTime - startTime) / 1000;
    const totalBits = bytesReceived * 8;
    const finalSpeedMbps = totalBits / totalDuration / 1000000;
    return finalSpeedMbps;
  } catch {
    status.textContent = "Download test failed.";
    return 0;
  }
}

startBtn.addEventListener('click', async () => {
  startBtn.disabled = true;
  status.textContent = "Test in progress...";
  bar.style.width = "0%";
  speedText.textContent = "Speed: 0 Mbps";
  latencyText.textContent = "Latency: -- ms";

  const latency = await testLatency(latencyUrl);
  if(latency !== null) latencyText.textContent = `Latency: ${latency} ms`;
  else latencyText.textContent = "Latency: Error";

  const downloadSpeed = await testDownload(downloadUrl);
  speedText.textContent = `Speed: ${downloadSpeed.toFixed(2)} Mbps`;
  status.textContent = "Test completed";
  startBtn.disabled = false;
});

// Initial fetch of IP & country on page load
fetchIPCountry();
</script>

</body>
</html>
